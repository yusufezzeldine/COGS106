# -*- coding: utf-8 -*-
"""COGS106_A3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tJiCr2quO2g-QS2LFFVaWYthL84t27MH
"""

from scipy.special import ndtri

class SignalDetection:
  def __init__(self,hits,misses,false_alarms,correct_rejections):
    # Define variables
    self.hits = hits
    self.misses = misses
    self.false_alarms = false_alarms
    self.correct_rejections = correct_rejections
  
  def hit_rate(self):
    # Calculates the Hit Rate
    return (self.hits / (self.hits + self.misses))

  def false_alarm_rate(self):
    # Calculates the False Alarm Rate 
    return (self.false_alarms / (self.false_alarms + self.correct_rejections))
  
  def d_prime(self):
    # Calculates the d-Prime value
    return (ndtri(self.hit_rate()) - ndtri(self.false_alarm_rate()))
  
  def criterion(self):
    # Calculates the Criterion value
    return (-0.5 * (ndtri(self.hit_rate()) + ndtri(self.false_alarm_rate())))

## Test if we did it right

import unittest
import numpy as np
import matplotlib.pyplot as plt

class TestSignalDetection(unittest.TestCase):
    def test_d_prime_zero(self):
        sd   = SignalDetection(15, 5, 15, 5)
        expected = 0
        obtained = sd.d_prime()
        # Compare calculated and expected d-prime
        self.assertAlmostEqual(obtained, expected, places=6)
    def test_d_prime_nonzero(self):
        sd   = SignalDetection(15, 10, 15, 5)
        expected = -0.421142647060282
        obtained = sd.d_prime()
        # Compare calculated and expected d-prime
        self.assertAlmostEqual(obtained, expected, places=6)
    def test_criterion_zero(self):
        sd   = SignalDetection(5, 5, 5, 5)
        # Calculate expected criterion        
        expected = 0
        obtained = sd.criterion()
        # Compare calculated and expected criterion
        self.assertAlmostEqual(obtained, expected, places=6)
    def test_criterion_nonzero(self):
        sd   = SignalDetection(15, 10, 15, 5)
        # Calculate expected criterion        
        expected = -0.463918426665941
        obtained = sd.criterion()
        # Compare calculated and expected criterion
        self.assertAlmostEqual(obtained, expected, places=6)

if __name__ == '__main__':
    unittest.main(argv=['ignored'], exit=False)